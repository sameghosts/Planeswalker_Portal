Databases to Create

planeswalker_development
planeswalker_test
planeswalker_production

createdb planeswalker_development
createdb planeswalker_test
createdb planeswalker_production

models 
update user model to have card favorite integer amount
example: sequelize model:create --name comment --attributes author:string,content:string,articleid:integer

------- User model ----------
~~~ASSOCIATIONS~~~
models.user.hasMany(models.card_comment)
models.user.hasMany(models.deck_comment)
models.user.hasMany(models.deck)
models.user.belongsToMany(models.card, {through: "user_card_fave"})
models.user.belongsToMany(models.deck, {through: "user_deck"})
models.user.belongsToMany(models.card, {through: "user_collection"})


-------- Card model --------
name - name of card - string
manaCost - actual cost - string
cmc - converted mana cost - integer
colors - card colors - string
colorIdentity - colors simplified - string
type - card type - string
rarity - card rarity - string
blockset - set name code - string
text- card text - string
multiverseId - gatherer code - integer
imageUrl - url to card image - string 

sequelize model:create --name card --attributes name:string,manaCost:string,cmc:string,colorIdentity:string,type:string,rarity:string,blockset:string,text:string,multiverseId:integer,imageUrl:string
~~~ASSOCIATIONS~~~
models.card.hasMany(models.card_comment)
models.card.hasMany(models.dual_n_split)
models.card.hasMany(models.flavor)
models.card.belongsToMany(models.user, {through: "user_card_fave"})
models.card.belongsToMany(models.user, {through: "user_collection"})
models.card.belongsToMany(models.deck, {through: "deck_card"})




------- Deck model -------
name - name of the deck - string
format - play format - string
creator - deck creator - integer (foreign key userId)

sequelize model:create --name deck --attributes name:string,format:string,creator:integer
~~~ASSOCIATIONS~~~
models.deck.belongsTo(models.user)
models.deck.hasMany(models.deck_comment)
models.deck.belongsToMany(models.user, {through: "user_deck"})
models.deck.belongsToMany(models.card, {through: "deck_card"})


------ deck_comment model ------
deckId - foreign key - integer
userId - foregin key - integer
comment - comment text - string

sequelize model:create --name deck_comment --attributes deckId:integer,userId:integer,comment:string
~~~ASSOCIATIONS~~~
models.deck_comment.belongsTo(models.deck)
models.deck_comment.belongsTo(models.user)

------ card_comment model ------
cardId - foreign key - integer
userId - foreign key - integer
comment - comment text - string

sequelize model:create --name card_comment --attributes cardId:integer,userId:integer,comment:string
~~~ASSOCIATIONS~~~
models.card_comment.belongsTo(models.card)
models.card_comment.belongsTo(models.user)

------ dual_n_split model ---------
cardId - foreign key - integer
'' rest of the card model as secondary data attributes
  first card in card object array on dual creature first object 
sequelize model:create --name dual_n_split --attributes cardId:integer,name:string,manaCost:string,cmc:string,colorIdentity:string,type:string,rarity:string,blockset:string,text:string,multiverseId:integer,imageUrl:string
~~~ASSOCIATIONS~~~
models.dual_n_split.belongsTo(models.card)

------ flavor model ------
cardId - fk - integer
flavorText - flavor text if it exists - string

sequelize model:create --name flavor --attributes cardId:integer,flavorText:string
~~~ASSOCIATIONS~~~
models.flavor.belongsTo(models.card)

~~~~~ JOIN TABLES ~~~~~

---- user_deck ----
id - pk 
userId - foreign key - integer
deckId - foregin key - integer

sequelize model:create --name user_decks --attributes userId:integer,deckId:integer
~~~ASSOCIATIONS~~~


---- deck_card -----
id - pk 
deckId - foreign key - integer
cardId - foregin key - integer
amount - card amount - integer

sequelize model:create --name deck_cards --attributes deckId:integer,cardId:integer
~~~ASSOCIATIONS~~~

---- user_card_faves -----
id - pk 
userId - fk - integer
cardId - fk - integer

sequelize model:create --name user_card_faves --attributes userId:integer,cardId:integer
~~~ASSOCIATIONS~~~

------ user_collection model -------
userId - foreign key - integer
cardId - foreign key - integer
amount - card collection amount - integer

sequelize model:create --name user_collections --attributes userId:integer,cardId:integer,amount:integer
~~~ASSOCIATIONS~~~

db.deck_comment.findOrCreate()

blah blah blah

git config --global user.name "sameghosts"
git config --global user.email seanfeiner.brown@gmail.com

git commit --amend --reset-author